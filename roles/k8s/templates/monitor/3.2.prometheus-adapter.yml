apiVersion: v1
kind: Namespace
metadata:
  name: custom-metrics
{% if docker_registry_key|default('') != '' %}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ docker_registry_key }}
  namespace: custom-metrics
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: {{ docker_registry_config_json }}
{% endif %}
---
apiVersion: v1
kind: Secret
metadata:
  name: cm-adapter-serving-certs
  namespace: custom-metrics
data:
  serving.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURnVENDQW1tZ0F3SUJBZ0lVT0pmSTcrTVNzOWRBb1hqVG0wSFlQQ1k1Z0djd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0RURUxNQWtHQTFVRUF3d0NZMkV3SGhjTk1qSXhNREV5TURjeE56QXdXaGNOTXpJeE1EQTVNRGN4TnpBdwpXakFqTVNFd0h3WURWUVFERXhoamRYTjBiMjB0YldWMGNtbGpjeTFoY0dselpYSjJaWEl3Z2dFaU1BMEdDU3FHClNJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURlaGplWktpWEdZcFh2azU2Vm82Nm5vdHFVWXVkTlFGR2QKQ0UrMWJkSmZZelYzSlI1ZHphZGY3SVB0Mk9MblJ6WTZuc0QxTHZORXpFUisvV0pBRlB5ZEpkT1dNQTdsd1kydwpXNjcwei9Hb1F0MDFMS1pML2xxWFN4QlBBRjRuYkhmL25lNW0xRjJFTWVvRVNWbHVkVnBSY0taQVhLdU9Ldjk0Cm8ydDJtRlcrb1NrWWYxYkprZ0tlYWhScXpGWm42bVhvVUNEV2d2dm91RE8zM1RBY0dTOU5HT2ptd21FdEEzMS8KZDI5NXZqVjZiaS85UnNHQ3FKa2lRVWZnK3BMVk5PQnJZQk1mTVdycXpuaFQyd3NMN3NvRlN0dnlSYUhQcWcvZQpvcDlZVVQ4bWhObHVVbW5nd0Y0TjFRUmlZN01YS3hCNStJZWxPclJPVzZVMVh3TmRiWDRmQWdNQkFBR2pnY0l3CmdiOHdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01Bd0dBMVVkRXdFQi93UUNNQUF3SFFZRFZSME9CQllFRkYwb2xoT0IKSEpNV0lvR0dVd1p3a1RIb0g1Q25NQjhHQTFVZEl3UVlNQmFBRkRkMDFjYkNMS3BQbkYzTUZ2NzlvcVY0ZVBFTgpNRjhHQTFVZEVRUllNRmFDSjJOMWMzUnZiUzF0WlhSeWFXTnpMV0Z3YVhObGNuWmxjaTVqZFhOMGIyMHRiV1YwCmNtbGpjNElyWTNWemRHOXRMVzFsZEhKcFkzTXRZWEJwYzJWeWRtVnlMbU4xYzNSdmJTMXRaWFJ5YVdOekxuTjIKWXpBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQW5vT3hQUU9ya1VKT1JNaFRUeDV1c2wxMEt2S3c2NjRLTHhteApxRXRUWlRRRFY0NjdzR2lOc2ZxcGQvMUxqd3hYMlNzeXd5c3FnRksva0IvcnNkc21uWTlqNnVDa3NLNDFWeUEzCldWNG1Bc2VZT2lWN080UGJTS0YyUFNEbXB4bVpndUYvbDE2OHRhdHdVQUlzQjRkTmNpOXQ4RGJzTXBpYU9qWTYKQU5oUFpqSEpDUWNQcHRxeWJzb3ovMStENFRXMW02U1RocE5CTDh5Z0p4MGhFcmZWVEE1WnJjSDVhZ3VkUG1XYQpYVTBRMm5MT2NEMUFUTk82U3E1b0d4NTgyeHJ2QXkvU2dNQkROWGhRcHo2TkUyZ2lCOVA3dnUzcHdoMUpJUmNmCkJGZFQ1QXY3TDFUREFvUTlINDFTSmc1ZHdnNTBpaWFwUmdpeUxUcnhpM3Q5ckNyYmZRPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  serving.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBM29ZM21Tb2x4bUtWNzVPZWxhT3VwNkxhbEdMblRVQlJuUWhQdFczU1gyTTFkeVVlClhjMm5YK3lEN2RqaTUwYzJPcDdBOVM3elJNeEVmdjFpUUJUOG5TWFRsakFPNWNHTnNGdXU5TS94cUVMZE5TeW0KUy81YWwwc1FUd0JlSjJ4My81M3VadFJkaERIcUJFbFpiblZhVVhDbVFGeXJqaXIvZUtOcmRwaFZ2cUVwR0g5Vwp5WklDbm1vVWFzeFdaK3BsNkZBZzFvTDc2TGd6dDkwd0hCa3ZUUmpvNXNKaExRTjlmM2R2ZWI0MWVtNHYvVWJCCmdxaVpJa0ZINFBxUzFUVGdhMkFUSHpGcTZzNTRVOXNMQys3S0JVcmI4a1doejZvUDNxS2ZXRkUvSm9UWmJsSnAKNE1CZURkVUVZbU96RnlzUWVmaUhwVHEwVGx1bE5WOERYVzErSHdJREFRQUJBb0lCQUFvMEEwYWRuUi9NazIxcAp5bUs0SDZFR0labWVNMWJpZFJ1TEx3UjFwYWpFQnNhUXlDU3E4bHErb0luK1lPRVQ3ZE9nUmQ2NEtXVmxMRnJhClNYQUF4bGg2VElwZFo4RjNMNFQvbnpVUWQ5Y3NRYkpYZXNTUFJCNGR6Z0NoVnEvZUZGNS9JbGhLc29NR091RzUKYjBWV1VpN2J5SE81REJDM3ZnRU5GVGRaNHN5Ynh6OWJkd3VGQzJyaGVqdTlOSXY4NUkvWXpVOVpqVnBkMkhDaAo3VWdDRlk0VHZ2OGlwbXk5K2RWM0JINmxBc09tYXdRczBSVkhTczFKV1I0NklSS0tPOUcyOE5nS1k3ZFh0dkl3Cjg0YS9iUFNZZTltUmpEU0xyYU5BN1VxOTBvYWMyVXVTdmdIc0tyaE4rV1JkcDFRbWhCWVcvRzBzSFpYRjVqWjYKbFcvdXgra0NnWUVBNmtqOXhiQTNzL2Y5aklpOGxpY1NCWjhIUmluQnNEcWhXUjRZZnhmWHczN1dGdDhhRmZrWgoyckFiYU1HNHhNSndlbkdCWkJxSXlFOW5vTHNJR3NBbU5RY3ovSi9GV3loTVBVUzFoMTZvU1FTNVo4UmE2MzdICm1OU212NEJPcVcrM09MczJweHJ4NUVxV3R5UW9TSDRrYmdxemxNVXZPbE95SC9IVXFsQjRyaVVDZ1lFQTh5WXIKa3c5SzVKZmRmQnV5M2psbFovbkZJcEE2U3V1VW5PR2plV1JueTJCc2VRUGFtQmpmY3ZybnFJYW5BM0oxbWhCWAp5V3ZYT2RDMUtCUTB6c0FDb0gzQUJJWWg0WEJES2gwMlBHVzRBUXNDWVMxZk1DR3kwOUYwTkFxRTBkSjFZSm1NClA4Ym1NSFU3OFRVYzI5VndsNllnVzQvVlpwQ2tsS2E0Y1lxdUhmTUNnWUF4d2lUYnVxeHA5YTZORFhGNE5uNFcKWVlzcTlLMWxYMTVyVGdBSDVpbDJKTmNWYm5iYzJkWUs0MEkvQW4zYWxDMU5aQlFHRGJpbFNuQUk3QkF4bGtQSApHV3VLS09qQ2pwRjZwY0FrS3c5MHlxTVNEZHI5anlTWEtmcnNTelRwdVlkaGJpbVNYaCtueTh1c3crb21VMXdyClh1eDdHVklKZ2tNZms3NEdHaWMzWFFLQmdDcVdtZlZGTFhJQ281bTBaRTBHTXB2V3BNL2NBVW5VSDVDbStQSXYKUXZyZFpjS0FpVTR3dFJxM2xkSHYyOXIvdGxlSTIwZDlheEpHV3lTcy9WN2xSTkNGbGhkMHd3UnduR01KQU5IdApZeUJUcEZRUEZXZ2h6dWZJL1JpTWF4MHhScnZueVNmMmw2VVBNN09aQVBnRVY1ZElVc3lXMGVNSUhMdW94QStuCkliNC9Bb0dCQU53Ry9KcDhLZEtDa2JWMkdWSERac202eDFtWTM5U29VRTV2VHltQXFXQ0c5VmNMbWt2anRSZTAKTDVHR1RIY29kWkU0V3hkYmJKbVR0d0gvQWk2dWMzUWJpZWxaRy9scWFKV202RnZLRVFoMkNWaTQzeE51eGNaLwpKeWYraGpDSEdMYXg4bWNZaTRrNVZyQTQyMW1iRzE2N2ZkZkFla1A5WmRCZUEyUWgrdnV0Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: custom-metrics-resource-reader
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - nodes
  - nodes/stats
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: custom-metrics-resource-reader
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: custom-metrics-resource-reader
subjects:
- kind: ServiceAccount
  name: custom-metrics-apiserver
  namespace: custom-metrics
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: hpa-controller-custom-metrics
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: custom-metrics-server-resources
subjects:
- kind: ServiceAccount
  name: horizontal-pod-autoscaler
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: custom-metrics-server-resources
rules:
- apiGroups:
  - custom.metrics.k8s.io
  - external.metrics.k8s.io
  resources: ["*"]
  verbs: ["*"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: custom-metrics:system:auth-delegator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: custom-metrics-apiserver
  namespace: custom-metrics
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: custom-metrics-auth-reader
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: custom-metrics-apiserver
  namespace: custom-metrics
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: custom-metrics-apiserver
  namespace: custom-metrics
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1beta1.custom.metrics.k8s.io
spec:
  service:
    name: custom-metrics-apiserver
    namespace: custom-metrics
  group: custom.metrics.k8s.io
  version: v1beta1
  insecureSkipTLSVerify: true
  groupPriorityMinimum: 100
  versionPriority: 100
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1beta2.custom.metrics.k8s.io
spec:
  service:
    name: custom-metrics-apiserver
    namespace: custom-metrics
  group: custom.metrics.k8s.io
  version: v1beta2
  insecureSkipTLSVerify: true
  groupPriorityMinimum: 100
  versionPriority: 200
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  # name: v1beta1.external.metrics.k8s.io
  name: v1.metrics.k8s.io
spec:
  service:
    name: custom-metrics-apiserver
    namespace: custom-metrics
  group: external.metrics.k8s.io
  # version: v1beta1
  version: v1
  insecureSkipTLSVerify: true
  groupPriorityMinimum: 100
  versionPriority: 100
---
apiVersion: v1
kind: Service
metadata:
  name: custom-metrics-apiserver
  namespace: custom-metrics
spec:
  ports:
  - port: 443
    targetPort: 6443
  selector:
    app: custom-metrics-apiserver
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: adapter-config
  namespace: custom-metrics
data:
  config.yaml: |
    rules:
    {# 
    - seriesQuery: '{__name__="container_memory_working_set_bytes",container!="POD",namespace!="",pod!=""}'
      resources:
        overrides:
          namespace:
            resource: namespace
          pod:
            resource: pod
      name:
        matches: ^.*_memory_working_set_bytes$
        as: "container_memory_working_set_bytes"
      metricsQuery: sum(<<.Series>>{<<.LabelMatchers>>}) by (<<.GroupBy>>) 
    #}

    - seriesQuery: '{__name__=~"container_memory_working_set_bytes|container_spec_memory_limit_bytes",container!="POD",namespace!="",pod!=""}'
      resources:
        overrides:
          namespace:
            resource: namespace
          pod:
            resource: pod
      name:
        matches: ^(.*)
        as: "memory_limit_usage"
      metricsQuery: round(sum (container_memory_working_set_bytes{container!="POD",namespace!="",pod!=""}) by (namespace, pod) / sum (container_spec_memory_limit_bytes{container!="POD",namespace!="",pod!=""}) by (namespace, pod) * sum (avg_over_time(kube_pod_status_ready{condition="true"}[1m])) by (namespace, pod) * 100) 

    - seriesQuery: '{__name__=~"container_cpu_usage_seconds_total|container_spec_cpu_quota",container!="POD",namespace!="",pod!=""}'
      resources:
        overrides:
          namespace:
            resource: namespace
          pod:
            resource: pod
      name:
        matches: ^(.*)
        as: "cpu_limit_usage"
      metricsQuery: round(sum by(namespace, pod) (rate(container_cpu_usage_seconds_total{image!=""}[1m])) / (sum by(namespace, pod) (container_spec_cpu_quota{image!=""} / 100000)) * sum (avg_over_time(kube_pod_status_ready{condition="true"}[1m])) by (namespace, pod) * 100 ) 

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: custom-metrics-apiserver
  name: custom-metrics-apiserver
  namespace: custom-metrics
spec:
  replicas: 1
  selector:
    matchLabels:
      app: custom-metrics-apiserver
  template:
    metadata:
      labels:
        app: custom-metrics-apiserver
      name: custom-metrics-apiserver
    spec:
{% if docker_registry_key|default('') != '' %}
      imagePullSecrets:
      - name: "{{docker_registry_key}}"
{% endif %}
      serviceAccountName: custom-metrics-apiserver
      containers:
      - name: custom-metrics-apiserver
        {%- if k8s_env == 'aws' %} 
        image: registry.k8s.io/prometheus-adapter/prometheus-adapter:v0.10.0
        {%- else %} 
        image: {{ deploy_repository_url }}/{{ deploy_public_category }}prometheus-adapter:v0.10.0
        {%- endif %} 
        args:
        - --secure-port=6443
        - --tls-cert-file=/var/run/serving-cert/serving.crt
        - --tls-private-key-file=/var/run/serving-cert/serving.key
        - --logtostderr=true
        - --prometheus-url=http://prometheus.monitor.svc:9090/
        - --metrics-relist-interval=1m
        - --v=3
        - --config=/etc/adapter/config.yaml
        ports:
        - containerPort: 6443
          name: https
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /livez
            port: https
            scheme: HTTPS
        readinessProbe:
          httpGet:
            path: /readyz
            port: https
            scheme: HTTPS
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 128Mi
        volumeMounts:
        - mountPath: /var/run/serving-cert
          name: volume-serving-cert
          readOnly: true
        - mountPath: /etc/adapter/
          name: config
          readOnly: true
        - mountPath: /tmp
          name: tmp-vol
      volumes:
      - name: volume-serving-cert
        secret:
          secretName: cm-adapter-serving-certs
      - name: config
        configMap:
          name: adapter-config
      - name: tmp-vol
        emptyDir: {}

