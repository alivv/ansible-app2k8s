---

apiVersion: v1
kind: Service
metadata:
  name: {{ redis.name }}
  namespace: {{ namespace }}
  labels:
    app: {{ redis.name }}
    env: {{ env }}
spec:
  clusterIP: None
  selector:
    app: {{ redis.name }}
    env: {{ env }}
  ports:
  - name: redis
    port: 6379
    targetPort: 6379
  - name: prom
    port: 9121
    targetPort: 9121

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ redis.name }}-config
  namespace: {{ namespace }}
data:
  redis.conf: |

    port 6379
    tcp-backlog 511
    loglevel notice
    save 900 1
    save 300 10
    save 60 10000
    dir  /data
    dbfilename dump.rdb
    # ram-limit*0.7|int #
    maxmemory 716mb
    maxmemory-policy volatile-lru

    {# ##注释
    port 6379
    tcp-backlog 511
    bind 0.0.0.0
    # protected-mode yes
    timeout 0
    tcp-keepalive 300
    daemonize no
    supervised no
    pidfile /var/run/redis_6379.pid
    loglevel notice
    logfile "/data/redis_6379.log"
    databases 16
    always-show-logo yes
    # requirepass redis.passwd
    save 900 1
    save 300 10
    save 60 10000
    stop-writes-on-bgsave-error yes
    rdbcompression yes
    rdbchecksum yes
    dbfilename dump.rdb
    dir  /data
    # replica-serve-stale-data yes
    # replica-read-only yes
    repl-diskless-sync no
    repl-diskless-sync-delay 5
    repl-disable-tcp-nodelay no
    replica-priority 100
    # limit-ram*0.7
    maxmemory {{ Redismx }}mb
    maxmemory-policy volatile-lru
    lazyfree-lazy-eviction no
    lazyfree-lazy-expire no
    lazyfree-lazy-server-del no
    replica-lazy-flush no
    appendonly no
    appendfilename "appendonly.aof"
    appendfsync everysec
    no-appendfsync-on-rewrite no
    auto-aof-rewrite-percentage 100
    auto-aof-rewrite-min-size 64mb
    aof-load-truncated yes
    aof-use-rdb-preamble yes
    lua-time-limit 5000
    slowlog-log-slower-than 10000
    slowlog-max-len 128
    latency-monitor-threshold 0
    notify-keyspace-events ""
    hash-max-ziplist-entries 512
    hash-max-ziplist-value 64
    list-max-ziplist-size -2
    list-compress-depth 0
    set-max-intset-entries 512
    zset-max-ziplist-entries 128
    zset-max-ziplist-value 64
    hll-sparse-max-bytes 3000
    stream-node-max-bytes 4096
    stream-node-max-entries 100
    activerehashing yes
    client-output-buffer-limit normal 0 0 0
    client-output-buffer-limit replica 256mb 64mb 60
    client-output-buffer-limit pubsub 32mb 8mb 60
    hz 10
    dynamic-hz yes
    aof-rewrite-incremental-fsync yes
    rdb-save-incremental-fsync yes 
    #help doc
    #https://blog.csdn.net/weixin_42425970/article/details/94132652
    ##注释 #}  

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ redis.name }}
  namespace: {{ namespace }}
spec:
  serviceName: {{ redis.name }}
  replicas: 1
  selector:
    matchLabels:
      app: {{ redis.name }}
      env: {{ env }}
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9121"
      labels:
        app.kubernetes.io/name: redis
        app: {{ redis.name }}
        env: {{ env }}
    spec:
{% if docker_registry_key|default('') != '' %}
      imagePullSecrets:
      - name: {{ docker_registry_key }}
{% endif %}
      # terminationGracePeriodSeconds: 15
{% if k8s_nodeAffinity == true %}
      affinity:
        nodeAffinity:
          {# #硬策略  -#} 
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: x.k8sNodeEnv
                operator: In
                values:
                - all
                - {{env}}
{% endif %}
      containers:
      - name: {{ redis.name }}
        image: "{{ deploy_repository_url }}/{{ deploy_public_category }}redis:{{ redis.tag }}"
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - mountPath: "/data"
          subPath: {{ redis.name }}
          name: redis-data
        - mountPath: "/etc/localtime"
          name: localtime
          readOnly: true
        - mountPath: "/etc/redis"
          name: redis-config
        ports:
        - containerPort: 6379
          name: redis
          protocol: TCP
        env:
        - name: ENV
          value: '/etc/profile'
        command:
        - redis-server
        - '/etc/redis/redis.conf'
        resources:
          requests:
            cpu: {{ redis.requests_cpu }}
            memory: {{ redis.requests_ram }}
          limits:
            cpu: {{ redis.limits_cpu }}
            memory: {{ redis.limits_ram }}
        lifecycle: 
          postStart: 
            exec: 
              command: 
              - sh
              - -c 
              - |
                echo "alias ll='ls -hl --color=auto'" >>/etc/profile
          preStop: 
            exec: 
              command: 
              - 'redis-cli'
              - 'bgsave'
        startupProbe:
          periodSeconds: 2
          failureThreshold: 100
          tcpSocket:
            port: 6379
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          # initialDelaySeconds: 10
          timeoutSeconds: 2
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          # initialDelaySeconds: 20
          timeoutSeconds: 2

      - name: redis-exporter
        image: "{{ deploy_repository_url }}/{{ deploy_public_category }}redis_exporter:{{ redis.exporter_tag }}"
        resources:
          requests:
            cpu: 100m
            memory: 16Mi
          limits:
            cpu: 100m
            memory: 64Mi
        ports:
        - containerPort: 9121

      volumes:
      - name: localtime
        hostPath:
          path: /etc/localtime
      - name: redis-config
        configMap:
          name: {{ redis.name }}-config
          items:
          - key: redis.conf
            path: redis.conf
      - name: redis-data
        persistentVolumeClaim:
          claimName: {{ k8s_data_pvc.name }}
