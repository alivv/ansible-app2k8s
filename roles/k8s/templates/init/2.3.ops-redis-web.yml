---
apiVersion: v1
kind: Service
metadata:
  name: ops-redis-web
  namespace: kube-public
spec:
  selector:
    app: ops-redis-web
  ports:
  - name: http
    port: 80
    targetPort: 80

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ops-redis-web
  namespace: kube-public
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ops-redis-web
  template:
    metadata:
      labels:
        app: ops-redis-web
    spec:
      # securityContext:
        #runAsUser: 0
      containers:
      - name: ops-redis-web
        image: registry.aliyuncs.com/elvin/phpredisadmin:1.23
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        readinessProbe:
          tcpSocket:
            port: 80
          # httpGet:
          #   path: /api/health
          #   port: 80
        livenessProbe:
          tcpSocket:
            port: 80
          # httpGet:
          #   path: /api/health
          #   port: 80
        env:
        - name: TZ
          value: "Asia/Shanghai"
        - name: REDIS_1_NAME
          value: {{ redis.name }}
        - name: REDIS_1_HOST
          value: "{{ redis.name }}.{{ namespace }}.svc"
        - name: ADMIN_USER
          value: redis
        - name: ADMIN_PASS
          value: redis
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 1000m
            memory: 1024Mi
        volumeMounts:
        - name: data
          mountPath: /data
          subPath: redis-web
        - name: localtime
          mountPath: /etc/localtime
          readOnly: true
      volumes:
      - name: localtime
        hostPath:
          path: /etc/localtime
      - name: data
        persistentVolumeClaim:
          claimName: {{ k8s_public_pvc.name }}

---
#ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ops-redis-web
  namespace: kube-public
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/limit-connections: '100'
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    # cert-manager.io/cluster-issuer: "letsencrypt"
spec:
  tls:
  - hosts:
      - redis-ui.elvin.vip
    secretName: https-crt
  rules:
  - host: redis-ui.elvin.vip
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: ops-redis-web
            port: 
              number: 80
