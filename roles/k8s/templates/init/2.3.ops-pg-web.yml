---
apiVersion: v1
kind: Service
metadata:
  name: {{ env }}-pg-web
  namespace: {{ namespace }}
spec:
  selector:
    app: {{ env }}-pg-web
  ports:
  - name: pg-web
    port: 8080
    targetPort: 8080

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ env }}-pg-web
  namespace: {{ namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ env }}-pg-web
  template:
    metadata:
      labels:
        app.kubernetes.io/name: phppgadmin
        app: {{ env }}-pg-web
    spec:
      # securityContext:
        #runAsUser: 0
{% if k8s_nodeAffinity == true %}
      affinity:
        nodeAffinity:
          #硬策略
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: x.k8sNodeEnv
                operator: In
                values:
                - all
                - {{env}}
{% endif %}
      containers:
      - name: {{ env }}-pg-web
        image: registry.aliyuncs.com/elvin/phppgadmin:7
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        readinessProbe:
          tcpSocket:
            port: 8080
        livenessProbe:
          tcpSocket:
            port: 8080
        env:
        - name: DATABASE_HOST
          value: "{{ dbNode}}"
        - name: DATABASE_PORT_NUMBER
          value: "{{ dbport }}"
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 1000m
            memory: 1024Mi

---
#ingress
{% if k8s_version|default(1.18) * 100 < 119 %}
apiVersion: extensions/v1beta1
{% else %}
apiVersion: networking.k8s.io/v1
{% endif %}
kind: Ingress
metadata:
  name: {{ env }}-pg-web
  namespace: {{ namespace }}
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/limit-connections: '100'
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    # nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    # cert-manager.io/cluster-issuer: "letsencrypt"
spec:
  tls:
  - hosts:
      - {{env}}-pg-web.elvin.vip
    secretName: {{env}}-pg-web.elvin.vip-ssl
  rules:
  - host: {{env}}-pg-web.elvin.vip
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
{% if k8s_version|default(1.18) * 100 < 119 %}
          serviceName: {{ env }}-pg-web
          servicePort: 8080
{% else %}
          service:
            name: {{ env }}-pg-web
            port: 
              number: 8080
{% endif %}
